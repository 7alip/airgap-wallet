{"version":3,"sources":["./src/app/validators/AddressValidator.ts","./src/app/pages/transaction-prepare/transaction-prepare.module.ts","./src/app/pages/transaction-prepare/transaction-prepare.ts","./src/app/pages/transaction-prepare/transaction-prepare.html"],"names":[],"mappings":"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","file":"pages-transaction-prepare-transaction-prepare-module.js","sourcesContent":["import { AddressService } from '@airgap/angular-core'\nimport { ICoinProtocol } from '@airgap/coinlib-core'\nimport { FormControl } from '@angular/forms'\n\nexport class AddressValidator {\n  public static validate(protocol: ICoinProtocol, addressService: AddressService): any {\n    return async (control: FormControl) => {\n      const isValid: boolean = await addressService.validate(String(control.value), protocol)\n      if (!isValid) {\n        return { addressFormat: 'Address format is unknown.' }\n      }\n\n      return null\n    }\n  }\n}\n","import { AirGapAngularCoreModule } from '@airgap/angular-core'\nimport { CommonModule } from '@angular/common'\nimport { NgModule } from '@angular/core'\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms'\nimport { RouterModule } from '@angular/router'\nimport { IonicModule } from '@ionic/angular'\nimport { TranslateModule } from '@ngx-translate/core'\n\nimport { ComponentsModule } from '../../components/components.module'\nimport { PipesModule } from '../../pipes/pipes.module'\n\nimport { TransactionPreparePage } from './transaction-prepare'\n\n@NgModule({\n  imports: [\n    IonicModule,\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    TranslateModule,\n    ComponentsModule,\n    PipesModule,\n    RouterModule.forChild([{ path: '', component: TransactionPreparePage }]),\n    AirGapAngularCoreModule\n  ],\n  declarations: [TransactionPreparePage]\n})\nexport class TransactionPreparePageModule {}\n","import { AddressService, AmountConverterPipe, ClipboardService } from '@airgap/angular-core'\nimport {\n  AirGapMarketWallet,\n  EthereumProtocol,\n  RskProtocol,\n  IACMessageType,\n  MainProtocolSymbols,\n  SubProtocolSymbols,\n  TezosProtocol,\n} from '@airgap/coinlib-core'\nimport { FeeDefaults } from '@airgap/coinlib-core/protocols/ICoinProtocol'\nimport { NetworkType } from '@airgap/coinlib-core/utils/ProtocolNetwork'\nimport { Component, NgZone } from '@angular/core'\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms'\nimport { ActivatedRoute, Router } from '@angular/router'\nimport { LoadingController } from '@ionic/angular'\nimport { BigNumber } from 'bignumber.js'\nimport { BehaviorSubject } from 'rxjs'\nimport { debounceTime } from 'rxjs/operators'\nimport { AccountProvider } from '../../services/account/account.provider'\nimport { DataService, DataServiceKey } from '../../services/data/data.service'\nimport { OperationsProvider } from '../../services/operations/operations'\nimport { PriceService } from '../../services/price/price.service'\nimport { ErrorCategory, handleErrorSentry } from '../../services/sentry-error-handler/sentry-error-handler'\nimport { AddressValidator } from '../../validators/AddressValidator'\nimport { DecimalValidator } from '../../validators/DecimalValidator'\n\ninterface TransactionFormState<T> {\n  value: T\n  dirty: boolean\n}\ninterface TransactionPrepareState {\n  availableBalance: BigNumber | null\n  forceMigration: boolean\n  feeDefaults: FeeDefaults\n  feeCurrentMarketPrice: number | null\n  sendMaxAmount: boolean\n  disableSendMaxAmount: boolean\n  disableAdvancedMode: boolean\n  disableFeeSlider: boolean\n  disablePrepareButton: boolean\n\n  estimatingMaxAmount: boolean\n  estimatingFeeDefaults: boolean\n\n  receiver: TransactionFormState<string>\n  receiverAddress: string\n\n  amount: TransactionFormState<string>\n  feeLevel: TransactionFormState<number>\n  fee: TransactionFormState<string>\n  isAdvancedMode: TransactionFormState<boolean>\n  memo: TransactionFormState<string>\n}\n\n@Component({\n  selector: 'page-transaction-prepare',\n  templateUrl: 'transaction-prepare.html',\n  styleUrls: ['./transaction-prepare.scss']\n})\nexport class TransactionPreparePage {\n  public readonly networkType: typeof NetworkType = NetworkType\n\n  public wallet: AirGapMarketWallet\n  public transactionForm: FormGroup\n  public amountForm: FormGroup\n\n  // temporary field until we figure out how to handle Substrate fee/tip model\n  public readonly isSubstrate: boolean\n  public ignoreExistentialDeposit: boolean | undefined\n\n  private readonly isSapling: boolean\n\n  public state: TransactionPrepareState\n  private _state: TransactionPrepareState\n  private readonly state$: BehaviorSubject<TransactionPrepareState>\n\n  private publicKey: string\n  private protocolID: string\n  private addressIndex: number | undefined\n\n  constructor(\n    public loadingCtrl: LoadingController,\n    public formBuilder: FormBuilder,\n    private readonly router: Router,\n    private readonly route: ActivatedRoute,\n    private readonly _ngZone: NgZone,\n    private readonly clipboardProvider: ClipboardService,\n    private readonly operationsProvider: OperationsProvider,\n    private readonly dataService: DataService,\n    private readonly amountConverterPipe: AmountConverterPipe,\n    private readonly priceService: PriceService,\n    private readonly addressService: AddressService,\n    public readonly accountProvider: AccountProvider\n  ) {\n    this.publicKey = this.route.snapshot.params.publicKey\n    this.protocolID = this.route.snapshot.params.protocolID\n    const addressIndex = this.route.snapshot.params.addressIndex\n    this.addressIndex = addressIndex === 'undefined' ? undefined : Number(addressIndex)\n\n    this.state$ = new BehaviorSubject(this._state)\n\n    const address: string = this.route.snapshot.params.address === 'false' ? '' : this.route.snapshot.params.address || ''\n    const amount: number = Number(this.route.snapshot.params.amount) || 0\n    const wallet: AirGapMarketWallet = this.accountProvider.walletByPublicKeyAndProtocolAndAddressIndex(\n      this.publicKey,\n      this.protocolID,\n      this.addressIndex\n    )\n\n    const forced = this.route.snapshot.params.forceMigration\n    const forceMigration: boolean = forced === 'forced' || false\n\n    this.transactionForm = this.formBuilder.group({\n      receiver: [address, Validators.required, AddressValidator.validate(wallet.protocol, this.addressService)],\n      amount: [amount, Validators.compose([Validators.required, DecimalValidator.validate(wallet.protocol.decimals)])],\n      feeLevel: [0, [Validators.required]],\n      fee: [0, Validators.compose([Validators.required, DecimalValidator.validate(wallet.protocol.feeDecimals)])],\n      memo: [undefined],\n      isAdvancedMode: [false, []]\n    })\n\n    this.wallet = wallet\n\n    this.isSubstrate =\n      wallet.protocol.identifier === MainProtocolSymbols.KUSAMA || wallet.protocol.identifier === MainProtocolSymbols.POLKADOT\n    this.ignoreExistentialDeposit = this.isSubstrate ? true : undefined\n\n    this.isSapling = wallet.protocol.identifier === MainProtocolSymbols.XTZ_SHIELDED\n\n    this.initState()\n      .then(async () => {\n        if (forceMigration) {\n          await this.forceMigration()\n        }\n        this.onChanges()\n        this.updateFeeEstimate()\n      })\n      .catch(handleErrorSentry(ErrorCategory.OTHER))\n  }\n\n  public onChanges(): void {\n    this.state$.pipe(debounceTime(200)).subscribe((state: TransactionPrepareState) => {\n      this.onStateUpdated(state)\n    })\n\n    this.transactionForm\n      .get('receiver')\n      .valueChanges.pipe(debounceTime(500))\n      .subscribe(async (value: string) => {\n        const receiverAddress: string | undefined = await this.addressService.getAddress(value, this.wallet.protocol)\n\n        this.updateState({\n          receiver: {\n            value,\n            dirty: true\n          },\n          receiverAddress: receiverAddress !== undefined ? receiverAddress : '',\n          disableSendMaxAmount: false,\n          disablePrepareButton:\n            this.transactionForm.invalid || receiverAddress === undefined || new BigNumber(this._state.amount.value).lte(0)\n        })\n        this.updateFeeEstimate()\n      })\n\n    this.transactionForm\n      .get('amount')\n      .valueChanges.pipe(debounceTime(500))\n      .subscribe((value: string) => {\n        const amount = new BigNumber(value)\n        this.updateState({\n          sendMaxAmount: false,\n          amount: {\n            value: amount.isNaN() ? '' : amount.toFixed(),\n            dirty: true\n          },\n          disablePrepareButton: this.transactionForm.invalid || amount.isNaN() || amount.lte(0)\n        })\n        this.updateFeeEstimate()\n      })\n\n    this.transactionForm\n      .get('fee')\n      .valueChanges.pipe(debounceTime(500))\n      .subscribe((value: string) => {\n        const fee = new BigNumber(value)\n        this.updateState({\n          fee: {\n            value: fee.isNaN() ? '' : fee.toFixed(),\n            dirty: true\n          },\n          disablePrepareButton: this.transactionForm.invalid || new BigNumber(this._state.amount.value).lte(0)\n        })\n\n        if (this._state.sendMaxAmount) {\n          this.updateWithMaxAmount(fee.toString(10))\n        }\n      })\n\n    this.transactionForm.get('feeLevel').valueChanges.subscribe((value: number) => {\n      const fee = new BigNumber(this.getFeeFromLevel(value))\n      this.updateState(\n        {\n          fee: {\n            value: fee.toFixed(),\n            dirty: false\n          },\n          feeLevel: {\n            value,\n            dirty: true\n          },\n          disablePrepareButton: this.transactionForm.invalid || new BigNumber(this._state.amount.value).lte(0)\n        },\n        false\n      )\n\n      if (this._state.sendMaxAmount) {\n        this.updateWithMaxAmount(fee.toString(10))\n      }\n    })\n\n    this.transactionForm.get('isAdvancedMode').valueChanges.subscribe((value: boolean) => {\n      this.updateState(\n        {\n          isAdvancedMode: {\n            value,\n            dirty: true\n          },\n          disablePrepareButton: this.transactionForm.invalid || new BigNumber(this._state.amount.value).lte(0)\n        },\n        false\n      )\n    })\n\n    this.transactionForm.get('memo').valueChanges.subscribe((value: string) => {\n      this.updateState(\n        {\n          memo: {\n            value,\n            dirty: true\n          },\n          disablePrepareButton: this.transactionForm.invalid || new BigNumber(this._state.amount.value).lte(0)\n        },\n        false\n      )\n    })\n  }\n\n  private async initState(): Promise<void> {\n    this._state = {\n      availableBalance: null,\n      forceMigration: false,\n      feeDefaults: this.wallet.protocol.feeDefaults,\n      feeCurrentMarketPrice: null,\n      sendMaxAmount: false,\n      disableSendMaxAmount: true,\n      disableAdvancedMode: this.isSubstrate || this.isSapling,\n      disableFeeSlider: true,\n      disablePrepareButton: true,\n      estimatingMaxAmount: false,\n      estimatingFeeDefaults: false,\n      receiver: {\n        value: this.transactionForm.controls.receiver.value,\n        dirty: false\n      },\n      receiverAddress: this.transactionForm.controls.receiver.value,\n      amount: {\n        value: this.transactionForm.controls.amount.value,\n        dirty: false\n      },\n      feeLevel: {\n        value: this.transactionForm.controls.feeLevel.value,\n        dirty: false\n      },\n      fee: {\n        value: this.transactionForm.controls.fee.value,\n        dirty: false\n      },\n      isAdvancedMode: {\n        value: this.transactionForm.controls.isAdvancedMode.value,\n        dirty: false\n      },\n      memo: {\n        value: this.transactionForm.controls.memo.value,\n        dirty: false\n      }\n    }\n    this.state = this._state\n\n    const [feeCurrentMarketPrice, availableBalance]: [number, BigNumber] = await Promise.all([\n      this.calculateFeeCurrentMarketPrice(this.wallet),\n      this.getAvailableBalance(this.wallet)\n    ])\n\n    this.updateState({\n      availableBalance,\n      feeCurrentMarketPrice\n    })\n  }\n\n  private updateState(newState: Partial<TransactionPrepareState>, debounce: boolean = true): void {\n    this._state = this.reduceState(this._state, newState)\n\n    if (debounce) {\n      this.state$.next(this._state)\n    } else {\n      this.onStateUpdated(this._state)\n    }\n  }\n\n  private reduceState(currentState: TransactionPrepareState, newState: Partial<TransactionPrepareState>): TransactionPrepareState {\n    return {\n      availableBalance: newState.availableBalance !== undefined ? newState.availableBalance : currentState.availableBalance,\n      forceMigration: newState.forceMigration !== undefined ? newState.forceMigration : currentState.forceMigration,\n\n      feeDefaults: newState.feeDefaults || currentState.feeDefaults,\n      feeCurrentMarketPrice:\n        newState.feeCurrentMarketPrice !== undefined ? newState.feeCurrentMarketPrice : currentState.feeCurrentMarketPrice,\n\n      sendMaxAmount: newState.sendMaxAmount !== undefined ? newState.sendMaxAmount : currentState.sendMaxAmount,\n\n      disableSendMaxAmount: newState.disableSendMaxAmount !== undefined ? newState.disableSendMaxAmount : currentState.disableSendMaxAmount,\n      disableAdvancedMode:\n        this.isSubstrate || (newState.disableAdvancedMode !== undefined ? newState.disableAdvancedMode : currentState.disableAdvancedMode),\n      disableFeeSlider:\n        this.isSubstrate || (newState.disableFeeSlider !== undefined ? newState.disableFeeSlider : currentState.disableFeeSlider),\n      disablePrepareButton: newState.disablePrepareButton !== undefined ? newState.disablePrepareButton : currentState.disablePrepareButton,\n\n      estimatingMaxAmount: newState.estimatingMaxAmount !== undefined ? newState.estimatingMaxAmount : currentState.estimatingMaxAmount,\n      estimatingFeeDefaults:\n        newState.estimatingFeeDefaults !== undefined ? newState.estimatingFeeDefaults : currentState.estimatingFeeDefaults,\n\n      receiver: newState.receiver || currentState.receiver,\n      receiverAddress: newState.receiverAddress !== undefined ? newState.receiverAddress : currentState.receiverAddress,\n\n      amount: newState.amount || currentState.amount,\n      feeLevel: newState.feeLevel || currentState.feeLevel,\n      fee: newState.fee || currentState.fee,\n      isAdvancedMode: newState.isAdvancedMode || currentState.isAdvancedMode,\n      memo: newState.memo || currentState.memo\n    }\n  }\n\n  private onStateUpdated(newState: TransactionPrepareState): void {\n    this.state = newState\n\n    this.updateTransactionForm({\n      receiver: this.state.receiver,\n      amount: this.state.amount,\n      fee: this.state.fee,\n      feeLevel: this.state.feeLevel,\n      isAdvancedMode: this.state.isAdvancedMode\n    })\n  }\n\n  private updateTransactionForm(formState: { [key: string]: TransactionFormState<any> }) {\n    const formValues = this.transactionForm.value\n    const updated = {}\n\n    Object.keys(formValues).forEach((key: string) => {\n      if (key in formState && !formState[key].dirty && formState[key].value !== formValues[key]) {\n        updated[key] = formState[key].value\n      }\n    })\n\n    this._ngZone.run(() => {\n      this.transactionForm.patchValue(updated, { emitEvent: false })\n      Object.keys(updated).forEach((key: string) => {\n        this.transactionForm.controls[key].markAsDirty()\n      })\n    })\n  }\n\n  private async calculateFeeCurrentMarketPrice(wallet: AirGapMarketWallet): Promise<number> {\n    if (wallet.protocol.identifier === SubProtocolSymbols.XTZ_BTC) {\n      return this.priceService.getCurrentMarketPrice(new TezosProtocol(), 'USD').then((price: BigNumber) => price.toNumber())\n    } else if (wallet.protocol.identifier.startsWith(SubProtocolSymbols.ETH_ERC20)) {\n      return this.priceService.getCurrentMarketPrice(new EthereumProtocol(), 'USD').then((price: BigNumber) => price.toNumber())\n    } else if (wallet.protocol.identifier.startsWith(SubProtocolSymbols.RBTC_ERC20)) {\n      return this.priceService.getCurrentMarketPrice(new RskProtocol(), 'USD').then((price: BigNumber) => price.toNumber())\n    } else {\n      return wallet.currentMarketPrice.toNumber()\n    }\n  }\n\n  private async getAvailableBalance(wallet: AirGapMarketWallet): Promise<BigNumber> {\n    // TODO: refactor this so that we do not need to check for the protocols\n    if (\n      wallet.protocol.identifier === MainProtocolSymbols.COSMOS ||\n      wallet.protocol.identifier === MainProtocolSymbols.KUSAMA ||\n      wallet.protocol.identifier === MainProtocolSymbols.POLKADOT\n    ) {\n      return new BigNumber(await wallet.protocol.getAvailableBalanceOfAddresses([wallet.addresses[0]]))\n    } else {\n      return wallet.currentBalance\n    }\n  }\n\n  private async updateFeeEstimate(): Promise<void> {\n    if (!this._state.isAdvancedMode.value) {\n      this.updateState({\n        estimatingFeeDefaults: true,\n        disableFeeSlider: true,\n        disablePrepareButton: true\n      })\n\n      const feeDefaults: FeeDefaults = await this.estimateFees().catch(() => undefined)\n      const feeLevel: number = feeDefaults && !this.isSubstrate ? 1 : this._state.feeLevel.value\n\n      this.updateState({\n        estimatingFeeDefaults: false,\n        feeDefaults,\n        fee: {\n          value: new BigNumber(this.getFeeFromLevel(feeLevel, feeDefaults)).toFixed(),\n          dirty: false\n        },\n        feeLevel: {\n          value: feeLevel,\n          dirty: false\n        },\n        disableFeeSlider: !feeDefaults,\n        disablePrepareButton: !feeDefaults || this.transactionForm.invalid || new BigNumber(this._state.amount.value).lte(0)\n      })\n    }\n  }\n\n  private async estimateFees(): Promise<FeeDefaults | undefined> {\n    const amount = new BigNumber(this._state.amount.value).shiftedBy(this.wallet.protocol.decimals)\n\n    const isAddressValid = this.transactionForm.controls.receiver.valid\n    const isAmountValid = this.transactionForm.controls.amount.valid && !amount.isNaN() && amount.gt(0)\n\n    return isAddressValid && isAmountValid && this._state.receiverAddress\n      ? this.operationsProvider.estimateFees(this.wallet, this._state.receiverAddress, amount)\n      : undefined\n  }\n\n  private getFeeFromLevel(feeLevel: number, feeDefaults?: FeeDefaults): string {\n    const defaults = feeDefaults || this._state.feeDefaults\n    switch (feeLevel) {\n      case 0:\n        return defaults.low\n      case 1:\n        return defaults.medium\n      case 2:\n        return defaults.high\n      default:\n        return defaults.medium\n    }\n  }\n\n  public async prepareTransaction() {\n    const amount = new BigNumber(this._state.amount.value).shiftedBy(this.wallet.protocol.decimals)\n    const fee = new BigNumber(this._state.fee.value).shiftedBy(this.wallet.protocol.feeDecimals)\n\n    const data = this.isSubstrate ? !this.ignoreExistentialDeposit : this._state.memo.value\n    try {\n      const { airGapTxs, unsignedTx } = await this.operationsProvider.prepareTransaction(\n        this.wallet,\n        this._state.receiverAddress,\n        amount,\n        fee,\n        this.accountProvider.getWalletList(),\n        data\n      )\n\n      this.accountProvider.startInteraction(this.wallet, unsignedTx, IACMessageType.TransactionSignRequest, airGapTxs)\n    } catch (error) {\n      //\n    }\n  }\n\n  public openScanner() {\n    const callback = async (address: string) => {\n      const receiverAddress: string | undefined = await this.addressService.getAddress(address, this.wallet.protocol)\n      this.updateState({\n        receiver: {\n          value: address,\n          dirty: false\n        },\n        receiverAddress: receiverAddress !== undefined ? receiverAddress : ''\n      })\n    }\n    const info = {\n      callback\n    }\n    this.dataService.setData(DataServiceKey.SCAN, info)\n    this.router.navigateByUrl('/scan-address/' + DataServiceKey.SCAN).catch(handleErrorSentry(ErrorCategory.NAVIGATION))\n  }\n\n  public async toggleMaxAmount(): Promise<void> {\n    this.updateState(\n      {\n        sendMaxAmount: !this._state.sendMaxAmount\n      },\n      false\n    )\n\n    if (this._state.sendMaxAmount) {\n      await this.updateWithMaxAmount()\n      this.updateFeeEstimate()\n    }\n  }\n\n  private async forceMigration(): Promise<void> {\n    this.updateState(\n      {\n        forceMigration: true,\n        sendMaxAmount: true,\n        disablePrepareButton: false\n      },\n      false\n    )\n    await this.updateWithMaxAmount()\n  }\n\n  private async updateWithMaxAmount(formFee?: string): Promise<void> {\n    this.updateState({\n      estimatingMaxAmount: true\n    })\n\n    const fee = formFee ? new BigNumber(formFee).shiftedBy(this.wallet.protocol.feeDecimals) : undefined\n    const maxAmount = await this.operationsProvider.estimateMaxTransferAmount(\n      this.wallet,\n      this._state.receiverAddress,\n      fee,\n      !this.ignoreExistentialDeposit\n    )\n\n    const formAmount = this.amountConverterPipe.transformValueOnly(maxAmount, this.wallet.protocol, this.wallet.protocol.decimals + 1)\n\n    if (!maxAmount.isNaN()) {\n      this.updateState({\n        estimatingMaxAmount: false,\n        amount: {\n          value: formAmount,\n          dirty: false\n        },\n        disablePrepareButton: this.transactionForm.invalid || maxAmount.isNaN() || maxAmount.lte(0)\n      })\n    }\n  }\n\n  public toggleExcludeExistentialDeposit(): void {\n    this.ignoreExistentialDeposit = !this.ignoreExistentialDeposit\n  }\n\n  public pasteClipboard() {\n    this.clipboardProvider.paste().then(\n      async (text: string) => {\n        const receiverAddress: string | undefined = await this.addressService.getAddress(text, this.wallet.protocol)\n\n        this.updateState({\n          receiver: {\n            value: text,\n            dirty: false\n          },\n          receiverAddress: receiverAddress !== undefined ? receiverAddress : '',\n          disableSendMaxAmount: false,\n          disablePrepareButton:\n            this.transactionForm.invalid || receiverAddress === undefined || new BigNumber(this._state.amount.value).lte(0)\n        })\n        this.updateFeeEstimate()\n      },\n      (err: string) => {\n        console.error('Error: ' + err)\n      }\n    )\n  }\n}\n","<ion-header class=\"ion-no-border\">\n  <ion-grid fixed=\"true\" class=\"ion-no-padding\">\n    <ion-toolbar>\n      <ion-buttons slot=\"start\">\n        <ion-back-button defaultHref=\"/tabs/portfolio\"></ion-back-button>\n      </ion-buttons>\n      <ion-title>\n        {{ 'transaction-prepare.title' | translate: { title: wallet.protocol.symbol } }}\n      </ion-title>\n    </ion-toolbar>\n  </ion-grid>\n</ion-header>\n\n<ion-content class=\"ion-no-padding\">\n  <ion-grid fixed=\"true\">\n    <ion-row class=\"ion-padding-horizontal\">\n      <ion-col class=\"ion-no-padding\">\n        <ion-row>\n          <ng-container\n            *ngIf=\"wallet.protocol.options.network && wallet.protocol.options.network.type !== networkType.MAINNET\"\n            class=\"ion-no-padding\"\n            lines=\"none\"\n            slot=\"start\"\n          >\n            <ion-badge color=\"danger\">{{ wallet.protocol.options.network.name }}</ion-badge>\n            <ion-badge *ngIf=\"wallet.protocol.options.network.type === networkType.CUSTOM\">\n              {{wallet.protocol.options.network.rpcUrl}}\n            </ion-badge>\n          </ng-container>\n        </ion-row>\n      </ion-col>\n    </ion-row>\n    <form [formGroup]=\"transactionForm\" class=\"ion-padding-bottom\">\n      <ion-card>\n        <ion-row class=\"ion-justify-content-between\">\n          <ion-col size=\"3\">\n            <ion-label color=\"blackLight\" class=\"ion-no-margin\" position=\"stacked\">\n              {{ 'transaction-prepare.amount_label' | translate }}\n            </ion-label>\n          </ion-col>\n          <ion-col size=\"9\" class=\"ion-text-end\">\n            <ion-label color=\"blackLight\" class=\"ion-no-margin\" position=\"stacked\">\n              {{ 'transaction-prepare.balance_label' | translate }}\n              <ng-container *ngIf=\"state.availableBalance !== null\">\n                {{ state.availableBalance | amountConverter: { protocol: wallet.protocol.identifier, maxDigits: wallet.protocol.decimals + 1\n                } | async }}\n              </ng-container>\n            </ion-label>\n          </ion-col>\n        </ion-row>\n        <ion-row class=\"amount__container\">\n          <ion-col size=\"2\" class=\"d-flex ion-align-items-center\">\n            <ion-avatar>\n              <airgap-identicon [address]=\"wallet.receivingPublicAddress\"></airgap-identicon>\n            </ion-avatar>\n          </ion-col>\n          <ion-col size=\"7\" class=\"ion-no-padding amount--container__input\">\n            <ion-item class=\"ion-no-padding\" lines=\"none\">\n              <ion-input\n                [attr.disabled]=\"state.forceMigration\"\n                formControlName=\"amount\"\n                type=\"number\"\n                id=\"amount-input\"\n                placeholder=\"0.0\"\n              ></ion-input>\n            </ion-item>\n          </ion-col>\n          <ion-col size=\"3\" class=\"ion-no-padding d-flex ion-align-items-center\">\n            <ion-toolbar>\n              <ion-buttons slot=\"end\">\n                <ion-button\n                  shape=\"round\"\n                  [attr.disabled]=\"state.disableSendMaxAmount\"\n                  [fill]=\"state.sendMaxAmount ? 'solid' : 'outline'\"\n                  size=\"small\"\n                  color=\"secondary\"\n                  (click)=\"toggleMaxAmount()\"\n                >\n                  <ion-spinner name=\"lines-small\" color=\"primary\" *ngIf=\"state.estimatingMaxAmount\"></ion-spinner>\n                  <span *ngIf=\"!state.estimatingMaxAmount\">{{ 'transaction-prepare.fee.max_label' | translate }}</span>\n                </ion-button>\n              </ion-buttons>\n            </ion-toolbar>\n          </ion-col>\n        </ion-row>\n\n        <ion-row>\n          <ion-col size=\"10\" offset=\"2\" *ngIf=\"!transactionForm.controls['amount'].valid\" class=\"ion-no-padding error--container\">\n            <ion-text class=\"ion-no-margin\" color=\"danger\">\n              <p class=\"ion-no-margin\">\n                {{ 'transaction-prepare.error.amount_label' | translate }}\n              </p>\n            </ion-text>\n          </ion-col>\n        </ion-row>\n        <ion-row>\n          <ion-col offset=\"2\" class=\"ion-no-padding\">\n            <ion-text class=\"ion-no-margin\" color=\"blackLight\">\n              <p class=\"ion-no-margin\">\n                ${{ wallet.currentMarketPrice.times(state.amount.value).toNumber() | number: '1.2-2' }}\n              </p>\n            </ion-text>\n          </ion-col>\n        </ion-row>\n        <ion-row class=\"rawdata--container\" *ngIf=\"isSubstrate && !state.disableSendMaxAmount\">\n          <ion-col class=\"ion-no-padding\">\n            <ion-item class=\"ion-no-padding\" lines=\"none\">\n              <ion-label>{{ 'transaction-prepare.existential_deposit' | translate }}</ion-label>\n              <ion-toggle [checked]=\"ignoreExistentialDeposit\" (ionChange)=\"toggleExcludeExistentialDeposit()\" slot=\"end\"></ion-toggle>\n            </ion-item>\n          </ion-col>\n        </ion-row>\n      </ion-card>\n      <ion-row>\n        <ion-col class=\"ion-text-center ion-no-padding divider--container\">\n          <ion-icon name=\"arrow-down-outline\" color=\"medium\"></ion-icon>\n        </ion-col>\n      </ion-row>\n      <ion-card>\n        <ion-row>\n          <ion-col size=\"3\">\n            <ion-label color=\"blackLight\" position=\"stacked\">{{ 'transaction-prepare.to-address_label' | translate }}</ion-label>\n          </ion-col>\n          <ion-col size=\"9\" class=\"ion-text-end\">\n            <ion-label\n              *ngIf=\"state.receiverAddress.length > 0 && state.receiverAddress !== state.receiver.value\"\n              color=\"blackLight\"\n              class=\"ion-no-margin\"\n              position=\"stacked\"\n            >\n              {{ state.receiverAddress | shortenString }}\n            </ion-label>\n          </ion-col>\n        </ion-row>\n        <ion-row class=\"to__container\">\n          <ion-col size=\"2\">\n            <ion-avatar class=\"d-flex ion-align-items-center\">\n              <airgap-identicon [address]=\"state.receiverAddress\"></airgap-identicon>\n            </ion-avatar>\n          </ion-col>\n          <ion-col size=\"10\" class=\"ion-no-padding\">\n            <ion-item class=\"content--align-vert__center to-address__item ion-no-padding \">\n              <ion-textarea\n                [attr.disabled]=\"state.forceMigration\"\n                [placeholder]=\"wallet.protocol.addressPlaceholder\"\n                formControlName=\"receiver\"\n                id=\"receiver-input\"\n              ></ion-textarea>\n            </ion-item>\n          </ion-col>\n          <ion-col\n            size=\"10\"\n            offset=\"2\"\n            class=\"ion-no-padding error--address\"\n            *ngIf=\"transactionForm.controls['receiver'].dirty && transactionForm.controls['receiver'].invalid\"\n          >\n            <ion-text class=\"ion-no-margin\" color=\"danger\">\n              <p\n                class=\"ion-no-margin\"\n                [innerHTML]=\"\n                'transaction-prepare.error.address_label' | translate: { addressPlaceholder: wallet.protocol.addressPlaceholder }\n              \"\n              ></p>\n            </ion-text>\n          </ion-col>\n          <ion-col size=\"10\" offset=\"2\" class=\"address-to__buttons\">\n            <ion-button\n              [attr.disabled]=\"state.forceMigration\"\n              fill=\"outline\"\n              size=\"small\"\n              color=\"secondary\"\n              shape=\"round\"\n              (click)=\"pasteClipboard()\"\n            >\n              {{ 'transaction-prepare.paste_label' | translate }}\n            </ion-button>\n            <ion-button\n              [attr.disabled]=\"state.forceMigration\"\n              fill=\"outline\"\n              size=\"small\"\n              color=\"secondary\"\n              shape=\"round\"\n              (click)=\"openScanner()\"\n            >\n              <ion-icon slot=\"start\" name=\"barcode-outline\"></ion-icon>\n              {{ 'transaction-prepare.to-address-scan_label' | translate }}\n            </ion-button>\n          </ion-col>\n        </ion-row>\n      </ion-card>\n\n      <fee [wallet]=\"wallet\" [state]=\"state\" [form]=\"transactionForm\"></fee>\n    </form>\n  </ion-grid>\n\n  <ion-fab vertical=\"bottom\" horizontal=\"end\" slot=\"fixed\">\n    <ion-button\n      id=\"prepare\"\n      size=\"default\"\n      color=\"primary\"\n      (click)=\"prepareTransaction()\"\n      [disabled]=\"state.disablePrepareButton\"\n      shape=\"round\"\n    >\n      <ion-icon slot=\"start\" name=\"open\"></ion-icon>\n      {{ 'transaction-prepare.create-transaction' | translate }}\n    </ion-button>\n  </ion-fab>\n</ion-content>\n"],"sourceRoot":"webpack:///"}