{"version":3,"sources":["./src/app/pages/account-import-ledger-onboarding/account-import-ledger-onboarding.module.ts","./src/app/pages/account-import-ledger-onboarding/account-import-ledger-onboarding.ts","./src/app/pages/account-import-ledger-onboarding/account-import-ledger-onboarding.html"],"names":[],"mappings":"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","file":"pages-account-import-ledger-onboarding-account-import-ledger-onboarding-module.js","sourcesContent":["import { CommonModule } from '@angular/common'\nimport { NgModule } from '@angular/core'\nimport { FormsModule } from '@angular/forms'\nimport { RouterModule } from '@angular/router'\nimport { IonicModule } from '@ionic/angular'\nimport { TranslateModule } from '@ngx-translate/core'\n\nimport { ComponentsModule } from '../../components/components.module'\n\nimport { AccountImportLedgerOnboardingPage } from './account-import-ledger-onboarding'\n\n@NgModule({\n  imports: [\n    IonicModule,\n    CommonModule,\n    FormsModule,\n    ComponentsModule,\n    TranslateModule,\n    RouterModule.forChild([{ path: '', component: AccountImportLedgerOnboardingPage }])\n  ],\n  declarations: [AccountImportLedgerOnboardingPage]\n})\nexport class AccountImportLedgerOnboardingPageModule {}\n","import { ProtocolService } from '@airgap/angular-core'\nimport { Component, ViewChild } from '@angular/core'\nimport { ActivatedRoute, Router } from '@angular/router'\nimport { IonSlides } from '@ionic/angular'\nimport { AirGapMarketWallet, ICoinProtocol } from '@airgap/coinlib-core'\nimport { ProtocolSymbols } from '@airgap/coinlib-core/utils/ProtocolSymbols'\nimport { promiseRetry } from '../../helpers/promise'\nimport { DataService, DataServiceKey } from '../../services/data/data.service'\nimport { LedgerService } from '../../services/ledger/ledger-service'\nimport { ErrorCategory, handleErrorSentry } from '../../services/sentry-error-handler/sentry-error-handler'\nimport { AccountSync } from 'src/app/types/AccountSync'\n\n@Component({\n  selector: 'page-account-import-ledger-onboarding',\n  templateUrl: 'account-import-ledger-onboarding.html',\n  styleUrls: ['./account-import-ledger-onboarding.scss']\n})\nexport class AccountImportLedgerOnboardingPage {\n  public slideAssets: [string, string][] = []\n\n  @ViewChild(IonSlides, { static: true })\n  public slides: IonSlides\n  public slideOpts = {\n    initialSlide: 0,\n    speed: 400,\n    pagination: {\n      el: '.swiper-pagination',\n      type: 'custom',\n      renderCustom: (_swiper, current, total): string => {\n        return this.customProgressBar(current, total)\n      }\n    }\n  }\n\n  public protocol: ICoinProtocol\n\n  public canSlidePrev: boolean = false\n  public canSlideNext: boolean = true\n  public canFinish: boolean = false\n\n  public isLoading: boolean = true\n  public isSuccess?: boolean = undefined\n  public isConnected: boolean = false\n\n  private importPromise?: Promise<void>\n\n  constructor(\n    private readonly route: ActivatedRoute,\n    private readonly router: Router,\n    private readonly protocolService: ProtocolService,\n    private readonly dataService: DataService,\n    private readonly ledgerService: LedgerService\n  ) {\n    this.init()\n  }\n\n  public async showPrevSlide(): Promise<void> {\n    await this.slides.slidePrev()\n  }\n\n  public async showNextSlide(): Promise<void> {\n    await this.slides.slideNext()\n  }\n\n  public ionSlideDidChange(): void {\n    this.slides\n      .getActiveIndex()\n      .then((val: number) => {\n        const isEnd = val === this.slideAssets.length - 1\n\n        this.canSlidePrev = val > 0\n        this.canSlideNext = !isEnd\n        this.canFinish = isEnd\n\n        this.importFromLedger()\n      })\n      .catch(handleErrorSentry(ErrorCategory.OTHER))\n  }\n\n  public retry(): void {\n    this.isLoading = true\n    this.isSuccess = undefined\n    this.importFromLedger()\n  }\n\n  public finish(): void {\n    this.router.navigateByUrl('/tabs/portfolio', { replaceUrl: true }).catch(handleErrorSentry(ErrorCategory.NAVIGATION))\n  }\n\n  private customProgressBar(current: number, total: number): string {\n    const ratio: number = current / total\n\n    const progressBarStyle: string =\n      \"style='transform: translate3d(0px, 0px, 0px) scaleX(\" + ratio + \") scaleY(1); transition-duration: 300ms;'\"\n    const progressBar: string = \"<span class='swiper-pagination-progressbar-fill' \" + progressBarStyle + '></span>'\n\n    let progressBarContainer: string =\n      \"<div class='swiper-pagination-progressbar' style='height: 4px; top: 6px; width: calc(100% - 32px);left: 16px;'>\"\n    progressBarContainer += progressBar\n    progressBarContainer += '</span></div>'\n\n    return progressBarContainer\n  }\n\n  private async init(): Promise<void> {\n    const protocolID: ProtocolSymbols = this.route.snapshot.params.protocolID\n    this.protocol = await this.protocolService.getProtocol(protocolID)\n\n    this.slideAssets = [\n      ['ledger_app_connected.svg', 'account-import-ledger-onboarding.slides.slide-1'],\n      [`ledger_app_${this.protocol.identifier}.svg`, 'account-import-ledger-onboarding.slides.slide-2'],\n      ['ledger_app_confirm.svg', 'account-import-ledger-onboarding.slides.slide-3']\n    ]\n\n    this.importFromLedger()\n  }\n\n  private async importFromLedger(): Promise<void> {\n    if (this.isSuccess || !this.protocol) {\n      return\n    }\n\n    if (!this.importPromise) {\n      this.importPromise = promiseRetry(this.connectWithLedger(), { maxRetries: 4, interval: 300 })\n        .then(() => {\n          return promiseRetry(\n            this.ledgerService.importWallet(this.protocol.identifier).then((wallet: AirGapMarketWallet) => {\n              this.isLoading = false\n              this.isSuccess = true\n\n              const accountSyncs: AccountSync[] = [\n                {\n                  wallet\n                }\n              ]\n\n              this.dataService.setData(DataServiceKey.SYNC_ACCOUNTS, accountSyncs)\n              this.router\n                .navigateByUrl(`/account-import/${DataServiceKey.SYNC_ACCOUNTS}`)\n                .catch(handleErrorSentry(ErrorCategory.NAVIGATION))\n            }),\n            { maxRetries: 1, interval: 300 }\n          )\n        })\n        .catch((error: any) => {\n          console.warn(error)\n          if (this.canFinish) {\n            this.isLoading = false\n            this.isSuccess = false\n          }\n        })\n        .finally(() => {\n          this.importPromise = undefined\n        })\n    }\n\n    return this.importPromise\n  }\n\n  private async connectWithLedger(): Promise<void> {\n    if (this.isConnected || !this.protocol) {\n      return\n    }\n\n    this.isLoading = true\n\n    return this.ledgerService.openConnection(this.protocol.identifier).then(() => {\n      this.isConnected = true\n    })\n  }\n}\n","<ion-header class=\"ion-no-border\">\n  <ion-grid fixed=\"true\" class=\"ion-no-padding\">\n    <ion-toolbar>\n      <ion-buttons slot=\"start\">\n        <ion-back-button defaultHref=\"/\"></ion-back-button>\n      </ion-buttons>\n      <ion-title *ngIf=\"protocol\">\n        <span [innerHTML]=\"'account-import-ledger-onboarding.title' | translate: { protocolName: protocol.name }\"></span>\n      </ion-title>\n    </ion-toolbar>\n  </ion-grid>\n</ion-header>\n\n<ion-content>\n  <ion-grid fixed=\"true\" class=\"ion-no-padding\">\n    <p\n      [innerHTML]=\"'account-import-ledger-onboarding.text' | translate: { protocolName: protocol.name }\"\n      class=\"ion-padding-horizontal\"\n      *ngIf=\"protocol\"\n    ></p>\n    <ion-card class=\"ion-margin\">\n      <ion-card-content>\n        <ion-item lines=\"none\" class=\"ion-no-padding\">\n          <ng-container *ngIf=\"isLoading\">\n            <ion-spinner slot=\"start\"></ion-spinner>\n            <ion-label>\n              <h3>{{ 'account-import-ledger-onboarding.status-card.connecting' | translate }}</h3>\n            </ion-label>\n          </ng-container>\n          <ng-container *ngIf=\"protocol && !isLoading && isSuccess !== undefined && !isSuccess\">\n            <ion-icon name=\"alert-circle-outline\" slot=\"start\" size=\"large\" color=\"warning\"></ion-icon>\n            <ion-label class=\"ion-text-wrap\">\n              <h3>\n                {{ 'account-import-ledger-onboarding.status-card.error.header' | translate }}\n              </h3>\n              <p>{{ 'account-import-ledger-onboarding.status-card.error.message' | translate: { protocolName: protocol.name } }}</p>\n            </ion-label>\n          </ng-container>\n          <ng-container *ngIf=\"!isLoading && isSuccess\">\n            <ion-icon name=\"checkmark-circle-outline\" slot=\"start\" size=\"large\" color=\"success\"></ion-icon>\n            <ion-label class=\"ion-text-wrap\">\n              <h3>{{ 'account-import-ledger-onboarding.status-card.success' | translate }}</h3>\n            </ion-label>\n          </ng-container>\n        </ion-item>\n        <ng-container *ngIf=\"!isLoading && isSuccess !== undefined && !isSuccess\">\n          <ion-button fill=\"clear\" color=\"primary\" (click)=\"retry()\">\n            {{ 'account-import-ledger-onboarding.status-card.retry_button' | translate }}\n          </ion-button>\n        </ng-container>\n      </ion-card-content>\n    </ion-card>\n    <ion-slides pager=\"true\" [options]=\"slideOpts\" #slides (ionSlideDidChange)=\"ionSlideDidChange()\">\n      <ng-container *ngIf=\"protocol\">\n        <ion-slide class=\"ion-padding-horizontal\" *ngFor=\"let slide of slideAssets\">\n          <div class=\"slide-zoom\">\n            <img [src]=\"'./assets/img/' + slide[0]\" />\n            <ion-text>\n              <p class=\"ion-text-left\" [innerHTML]=\"slide[1] | translate: { protocolName: protocol.name }\"></p>\n            </ion-text>\n          </div>\n        </ion-slide>\n      </ng-container>\n    </ion-slides>\n  </ion-grid>\n</ion-content>\n\n<ion-footer class=\"ion-no-border\">\n  <ion-grid fixed=\"true\" class=\"ion-no-padding\">\n    <ion-toolbar class=\"ion-no-padding\">\n      <ion-buttons slot=\"end\">\n        <ion-button *ngIf=\"canSlidePrev\" fill=\"clear\" color=\"primary\" (click)=\"showPrevSlide()\">\n          <ion-icon name=\"arrow-back\"></ion-icon>\n          {{ 'account-import-ledger-onboarding.back_button' | translate }}\n        </ion-button>\n        <ion-button *ngIf=\"canFinish\" fill=\"clear\" color=\"primary\" (click)=\"finish()\">\n          {{ 'account-import-ledger-onboarding.done_button' | translate }}\n        </ion-button>\n        <ion-button *ngIf=\"canSlideNext\" fill=\"clear\" color=\"primary\" (click)=\"showNextSlide()\">\n          {{ 'account-import-ledger-onboarding.next_button' | translate }}\n          <ion-icon name=\"arrow-forward\"></ion-icon>\n        </ion-button>\n      </ion-buttons>\n    </ion-toolbar>\n  </ion-grid>\n</ion-footer>\n"],"sourceRoot":"webpack:///"}